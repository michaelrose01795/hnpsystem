/* ============================================
   UPDATE JOB STATUS
============================================ */
export const updateJobStatus = async (jobId, newStatus) => {
  try {
    const { data, error } = await supabase
      .from("jobs")
      .update({ status: newStatus })
      .eq("id", jobId)
      .select()
      .single();

    if (error) return { success: false, error };
    return { success: true, data };
  } catch (error) {
    return { success: false, error: { message: error.message } };
  }
};

/* ============================================
   CREATE OR UPDATE APPOINTMENT
============================================ */
export const createOrUpdateAppointment = async (jobNumber, appointmentDate, appointmentTime) => {
  try {
    if (!jobNumber || !appointmentDate || !appointmentTime) return { success: false, error: { message: "Job number, date, and time are required" } };

    const { data: job, error: jobError } = await supabase
      .from("jobs")
      .select("id, job_number")
      .eq("job_number", jobNumber)
      .maybeSingle();

    if (!job || jobError) return { success: false, error: { message: `Job ${jobNumber} not found` } };

    const scheduledDateTime = `${appointmentDate}T${appointmentTime}:00`;

    const { data: existingAppointment } = await supabase
      .from("appointments")
      .select("appointment_id")
      .eq("job_id", job.id)
      .maybeSingle();

    let appointmentData;
    if (existingAppointment) {
      const { data, error } = await supabase
        .from("appointments")
        .update({ scheduled_time: scheduledDateTime, updated_at: new Date().toISOString() })
        .eq("appointment_id", existingAppointment.appointment_id)
        .select()
        .single();

      if (error) throw error;
      appointmentData = data;
    } else {
      const { data, error } = await supabase
        .from("appointments")
        .insert([{ job_id: job.id, scheduled_time: scheduledDateTime, status: "Scheduled", created_at: new Date().toISOString() }])
        .select()
        .single();

      if (error) throw error;
      appointmentData = data;
    }

    await updateJobStatus(job.id, "Booked");

    return { success: true, data: { appointment: appointmentData, jobId: job.id } };
  } catch (error) {
    return { success: false, error: { message: error.message || "Failed to create/update appointment" } };
  }
};

/* ============================================
   GET JOBS BY DATE
============================================ */
export const getJobsByDate = async (date) => {
  const { data, error } = await supabase
    .from("appointments")
    .select(`
      appointment_id,
      scheduled_time,
      notes,
      job:job_id(
        id,
        job_number,
        type,
        status,
        vehicle:vehicle_id(
          reg_number,
          make,
          model,
          customer:customer_id(
            firstname,
            lastname
          )
        )
      )
    `)
    .gte("scheduled_time", `${date}T00:00:00`)
    .lte("scheduled_time", `${date}T23:59:59`);

  if (error) return [];

  return data.map((a) => ({
    appointmentId: a.appointment_id,
    scheduledTime: a.scheduled_time,
    notes: a.notes,
    job: {
      id: a.job?.id,
      jobNumber: a.job?.job_number,
      type: a.job?.type,
      status: a.job?.status,
      reg: a.job?.vehicle?.reg_number,
      make: a.job?.vehicle?.make,
      model: a.job?.vehicle?.model,
      customer: a.job?.vehicle?.customer
        ? `${a.job.vehicle.customer.firstname} ${a.job.vehicle.customer.lastname}`
        : "",
    },
  }));
};
